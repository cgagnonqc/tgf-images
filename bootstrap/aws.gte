@define("aws-regions-table")
    ap-northeast-1 = "Asia Pacific (Tokyo)"
    ap-northeast-2 = "Asia Pacific (Seoul)"
    ap-south-1     = "Asia Pacific (Mumbai)"
    ap-southeast-1 = "Asia Pacific (Singapore)"
    ap-southeast-2 = "Asia Pacific (Sydney)"
    ca-central-1   = "Canada (Central)"
    eu-central-1   = "EU Central (Frankfurt)"
    eu-west-1      = "EU West (Ireland)"
    eu-west-2      = "EU West (London)"
    eu-west-3      = "EU West (Paris)"
    sa-east-1      = "South America (Sao Paulo)"
    us-east-1      = "US East (N. Virginia)"
    us-east-2      = "US East (Ohio)"
    us-west-1      = "US West (N. California)"
    us-west-2      = "US West (Oregon)"
@end

@define("get-region")
    @-get(data("aws-regions-table"), .region)
@end

@define("get-arn")
#! /usr/bin/env python3

service = '@service'
aws_global_arns = ['s3']
aws_region_less = ['iam']

join_args = ['arn', 'aws']
if service in aws_global_arns:
    join_args.append(service + '::')
elif service in aws_region_less:
    join_args.append(service + ':')
    join_args.append('@account_id')
else:
    join_args.append(service)
    join_args.append('@region')
    join_args.append('@account_id')

@if (.ARGS)
    @args := join(.separator, .ARGS)
@endif

join_args.append('@args')
print(':'.join(join_args))
@end

@func("GetRegionName", "template", "get-region", "region='us-east-1'", "[region]")
@func("arn", "exec", "get-arn", `separator=""`, "[service]")
@func("arns3", "exec", "get-arn", `separator="/" service="s3"`, list)